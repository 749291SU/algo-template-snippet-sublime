<snippet>  
    <content><![CDATA[namespace sxw {
    struct vcc_graph {
        // graph info
        int _n, _m;
        std::vector<int> e, ne, h, in; int idx;
        std::vector<int> w;

        // vcc info
        int root;
        std::vector<int> dfn, low, c, new_id, cut, st;
        std::vector<std::vector<int>> v_dcc;
        int tot, did, top;

        vcc_graph() { }
        vcc_graph(int n, int m) : _n(n), _m(m), e(m), ne(m), w(m), h(n, -1), in(n), idx(0) {
            dfn = std::vector<int> (_n);
            low = std::vector<int> (_n);
            c = std::vector<int> (_n);
            cut = std::vector<int> (_n);
            new_id = std::vector<int> (_n);
            st = std::vector<int> (_n);
            v_dcc = std::vector<std::vector<int>> (_n);
        }

        void add_edge(int a, int b, int c) {
            assert(a >= 0 && a < _n);
            assert(b >= 0 && b < _n);
            e[idx] = b; ne[idx] = h[a]; w[idx] = c; h[a] = idx ++;
        } 
        void init_tarjan() {
            tot = 0; did = 0; top = 0;
            std::fill(c.begin(), c.end(), 0);
            std::fill(dfn.begin(), dfn.end(), 0);
            std::fill(cut.begin(), cut.end(), 0);
        }
        void tarjan(int x, int in_edge) {
            dfn[x] = low[x] = ++ tot;

            st[++ top] = x;
            int flag = 0; 
            for (int i = h[x]; i != -1; i = ne[i]) {
                int j = e[i];
                if (!dfn[j]) {
                    tarjan(j, i);   
                    low[x] = min(low[x], low[j]);
                    if (dfn[x] <= low[j]) {
                        flag ++; did ++;
                        v_dcc[did].emplace_back(x); 
                        do {
                            v_dcc[did].emplace_back(st[top]); 
                        } while (st[top --] != j);
                    } 
                } 
                else if ((i ^ 1) != in_edge) low[x] = min(low[x], dfn[j]);
            }
            if (flag > 1 || (flag == 1 && x != root)) cut[x] = 1;
        }
        sxw::lca_graph<int> construct_v_dcc_trees() {
            int num = did;
            for (int i = 1; i < _n; i ++) {
                if (cut[i]) new_id[i] = ++ num;
            }
            sxw::lca_graph<int> G(num + 1, num * 2);
            for (int i = 1; i <= did; i ++) {
                for (int j = 0; j < v_dcc[i].size(); j ++) {
                    int x = v_dcc[i][j];
                    if (cut[x]) {
                        G.add_edge(new_id[x], i, 1);
                        G.add_edge(i, new_id[x], 1); 
                    }
                    else c[x] = i;
                }
            }  
            return G;
        }
    };
};
]]></content>  
    <tabTrigger>vcc-graph</tabTrigger>  
    <description>vcc-graph</description>  
    <scope>source.c++</scope>  
</snippet>