<snippet>  
    <content><![CDATA[namespace sxw {
    template <class T>
    struct sh_graph {
        private: 
            int _n, _m;
            std::vector<int> e, ne, h, in; int idx;
            std::vector<T> w;
        public :
            sh_graph() : _n(0), _m(0), idx(0) { }
            explicit sh_graph(int n, int m) : idx(0), _n(n), _m(m), e(m), ne(m), w(m), in(n), h(n, -1) { }

        void add_edge(int a, int b, T c) {
            assert(a >= 0 && a < _n);
            assert(b >= 0 && b < _n);
            assert(c >= 0);
            e[idx] = b; ne[idx] = h[a]; w[idx] = c; h[a] = idx ++; in[b] ++;
        }

        std::vector<int> topo() {
            std::vector<int> q; int hh = 0, tt = -1;
            for (int i = 0; i < _n; i ++) {
                if (!in[i]) { tt ++; q.emplace_back(i); }
            }

            while (hh <= tt) {
                int u = q[hh ++];
                
                for (int i = h[u]; i != -1; i = ne[i]) {
                    int v = e[i];
                    if ((-- in[v]) == 0) {
                        tt ++;
                        q.emplace_back(v);
                    }
                }   
            }
            return q;
        }

        std::vector<int> spfa(int s, int t) {
            std::vector<int> in(_n);
            std::vector<T> dist(_n, 0x3f3f3f3f);
            std::queue<int> q;
            q.push(s); dist[s] = 0;
            while (q.size()) {
                int t = q.front(); q.pop();
                for (int i = h[t]; i != -1; i = ne[i]) {
                    int j = e[i];
                    if (dist[j] > dist[t] + w[i]) {
                        dist[j] = dist[t] + w[i];
                        if (!in[j]) {
                            q.push(j);
                            in[j] = 1;
                        }
                    }
                }
            }
            return dist;
        }
        std::vector<int> dijkstra(int s, int t) {
            std::vector<int> vis(_n);
            std::vector<T> dist(_n, 0x3f3f3f3f);
            std::priority_queue<std::pair<T, int>, std::vector<std::pair<T, int>>, std::greater<std::pair<T, int>>> q;
            q.push(std::pair<T, int>(0, s)); dist[s] = 0;
            for (int i = 0; i < _n; i ++) {
                int t = q.top().se; q.pop();
                vis[t] = 1;
                for (int i = h[t]; i != -1; i = ne[i]) {
                    int j = e[i];
                    if (dist[j] > dist[t] + w[i]) {
                        dist[j] = dist[t] + w[i];
                        q.push(std::pair<T, int>(dist[j], j));
                    }
                }
            }
            return dist;
        }
    };
}]]></content>  
    <tabTrigger>shortest-graph</tabTrigger>  
    <description>shortest-graph</description>  
    <scope>source.c++</scope>  
</snippet>