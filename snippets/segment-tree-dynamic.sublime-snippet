<snippet>  
    <content><![CDATA[namespace sxw {
    struct Node {
        int l, r;
        int cc1, cc2;
        Node() { }
    }; 
    struct dyn_seg {
        int _n;
        std::vector<Node> tr; int tot;
        dyn_seg() { } 
        dyn_seg(int n) : _n(n), tr(n * 17 * 4), tot(0) {
            tr[0].cc1 = tr[0].cc2 = 0;
        } 
        int build(int l, int r) {
            tot ++;
            tr[tot].l = tr[tot].r = tr[tot].cc1 = tr[tot].cc2 = 0;
            return tot;
        }
        void pushup(int p, int l, int r, int lc, int rc, int v) {
            tr[p].cc1 = tr[lc].cc1;
            tr[p].cc2 = tr[rc].cc2;
        }
        void modify(int p, int l, int r, int val, int v1, int v2) {
            if (l == r) {
                tr[p].cc1 = tr[p].cc2 = 1;
                return ;
            } 
            int mid = l + r >> 1;
            if (val <= mid) {
                if (!tr[p].l) tr[p].l = build(l, mid);
                modify(tr[p].l, l, mid, val, v1, v2); 
            }
            else {
                if (!tr[p].r) tr[p].r = build(mid + 1, r);
                modify(tr[p].r, mid + 1, r, val, v1, v2);
            }
            pushup(p, l, r, tr[p].l, tr[p].r, v2);
        }
        Node ask(int p, int l, int r, int l1, int r1) {
            if (l1 <= l && r1 >= r) {
                return tr[p];
            }
            int mid = l + r >> 1;
            if (r1 <= mid) return ask(tr[p].l, l, mid, l1, r1);
            if (l1 > mid) return ask(tr[p].r, mid + 1, r, l1, r1);
            Node roo, lo = ask(tr[p].l, l, mid, l1, r1), ro = ask(tr[p].r, mid + 1, r, l1, r1);
            return roo;
        }
        int merge(int p, int q, int l, int r, int vv) {
            if (!p) return q; 
            if (!q) return p;

            if (l == r) {
                tr[p].cc1 = tr[p].cc2 = 1;
                return p;
            }

            int mid = l + r >> 1;
            tr[p].l = merge(tr[p].l, tr[q].l, l, mid, vv);
            tr[p].r = merge(tr[p].r, tr[q].r, mid + 1, r, vv);

            if (tr[tr[p].l].cc2 && tr[tr[p].r].cc1) {
                // std::cout << l << " " << r << " " << vv << "\n";
                b[mid] = min(b[mid], vv); 
            } 
            pushup(p, l, r, tr[p].l, tr[p].r, vv);
            return p;
        }
        void print(int p, int l, int r) {
            if (!p) return ;
            if (l == r) {
                // std::cout << l << " " << r << " " << tr[p].dat_cc << " " << tr[p].dat_id << "\n";                    
                return ;
            } 
            int mid = l + r >> 1;
            print(tr[p].l, l, mid); print(tr[p].r, mid + 1, r);
        }
    };
};]]></content>  
    <tabTrigger>segment-tree-dynamic</tabTrigger>  
    <description>segment-tree-dynamic</description>  
    <scope>source.c++</scope>  
</snippet>