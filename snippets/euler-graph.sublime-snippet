<snippet>
	<content><![CDATA[namespace sxw {
    template <class T>
    struct euler_graph {
        int _n, _m;
        std::vector<int> e, ne, h; int idx;
        std::vector<T> w;
        
        euler_graph() : _n(0), _m(0), idx(0) { }
        explicit euler_graph(int n, int m) : idx(0), _n(n), _m(m), e(m), ne(m), w(m), h(n, -1) { }

        void add_edge(int a, int b, T c) {
            assert(a >= 0 && a < _n);
            assert(b >= 0 && b < _n);
            assert(c >= 0);
            e[idx] = b; ne[idx] = h[a]; w[idx] = c; h[a] = idx ++;
        }

        std::vector<int> euler(int x) {
            int top = -1;
            std::vector<int> ans;
            std::vector<int> st(_m), vis(_m);
            st[++ top] = x;
            int u, eid;
            while (top >= 0) {
                u = st[top]; eid = h[u];
                while (eid >= 0 && vis[eid]) {
                    eid = ne[eid];   
                }
                if (eid >= 0) {
                    h[u] = ne[eid];
                    vis[eid] = vis[eid ^ 1] = 1;     
                    st[++ top] = e[eid];
                }
                else {
                    top --;
                    ans.emplace_back(u);
                }
            }    
            return ans;
        }
    };
};]]></content>
	<tabTrigger>euler-graph</tabTrigger>
	<scope>source.c++</scope>
</snippet>
