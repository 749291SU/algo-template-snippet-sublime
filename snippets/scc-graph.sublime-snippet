<snippet>  
    <content><![CDATA[namespace sxw {
	template <class T>
	struct scc_graph {
		// graph info
		int _n, _m;
	    std::vector<int> e, ne, h, in; int idx;
	    std::vector<T> w;
		// tarjan info
		std::vector<int> dfn, low, st, ins;		
		int tot, top;
		std::vector<std::vector<int>> scc;
		std::vector<int> c; int cnt;
		scc_graph() : _n(0), _m(0), idx(0) { }
        explicit scc_graph(int n, int m) : idx(0), _n(n), _m(m), e(m), ne(m), w(m), in(n), h(n, -1) {
        	dfn.resize(_n); low.resize(_n); st.resize(_n); ins.resize(_n);
        	c.resize(_n);
        }
        void add_edge(int a, int b, T c) {
            assert(a >= 1 && a < _n);
            assert(b >= 1 && b < _n);
            assert(c >= 0);
            e[idx] = b; ne[idx] = h[a]; w[idx] = c; h[a] = idx ++;
        }
		void init_tarjan() {
		    tot = top = 0; cnt = 0;
		    scc.clear();
		    scc.emplace_back(std::vector<int>());
		    std::fill(dfn.begin(), dfn.end(), 0);
		}
		void solve_tarjan() {
			init_tarjan();
			for (int i = 1; i < _n; i ++) {
				if (!dfn[i]) tarjan(i);
			}
		}
		void tarjan(int x) {
		    dfn[x] = low[x] = ++ tot; st[++ top] = x; ins[x] = 1;
		    for (int i = h[x]; i != -1; i = ne[i]) {
		        int j = e[i];
		        if (!dfn[j]) {
		            tarjan(j);
		            low[x] = min(low[x], low[j]); 
		        } 
		        else if (ins[j]) low[x] = min(low[x], dfn[j]);
		    }
		    if (low[x] == dfn[x]) {
		        cnt ++; int y;
		       	scc.emplace_back(std::vector<int>()); 
		        do {
		            y = st[top --];
		            c[y] = cnt; ins[y] = 0;
		            scc[cnt].emplace_back(y);

		        } while (y != x);
		    }
		}
		sxw::sh_graph<int> construct_scc_trees() {
            // std::cout << cnt << "\n";
			sxw::sh_graph<int> G(cnt + 1, _m);
		    int y;    
		    for (int i = 1; i < _n; i ++) {
		        for (int j = h[i]; j != -1; j = ne[j]) {
		            y = e[j]; 
		            if (c[i] != c[y]) {
		            	G.add_edge(c[i], c[y], w[j]);	
                        // std::cout << c[i] << " " << c[y] << "\n";
		            }
		        }
		    }
		    return G;
		}
	};
};]]></content>  
    <tabTrigger>scc-graph</tabTrigger>  
    <description>scc-graph</description>  
    <scope>source.c++</scope>  
</snippet>